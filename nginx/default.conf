# -------------------------------------------
# HTTP Server - Redirects to HTTPS
# -------------------------------------------
server {
  listen 80;  # Listen on port 80 (HTTP, unsecured)
  server_name erez-ir.ink www.erez-ir.ink;  # Respond to your domain

  # Redirect all HTTP traffic to HTTPS
  return 301 https://$host$request_uri;
}

# -------------------------------------------
# HTTPS Server - Handles secure traffic
# -------------------------------------------
server {
  listen 443 ssl;  # Listen on port 443 for HTTPS
  server_name erez-ir.ink www.erez-ir.ink;  # Match these domains

  # Paths to your Let's Encrypt certificate files
  ssl_certificate /etc/letsencrypt/live/erez-ir.ink/fullchain.pem;      # Full certificate chain
  ssl_certificate_key /etc/letsencrypt/live/erez-ir.ink/privkey.pem;    # Private key for the domain

  # Security settings for TLS protocol and ciphers
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers HIGH:!aNULL:!MD5;

  # -----------------------------------------
  # Static frontend files (e.g. React/Vue app)
  # -----------------------------------------
  location / {
    root /usr/share/nginx/html;        # Directory where your frontend build files are located
    index index.html;                  # Serve this by default when accessing the root
    try_files $uri /index.html;        # If file not found, fallback to index.html (used by SPAs like React or Vue)
  }

  # ------------------------
  # API - Reverse proxy
  # ------------------------
  location /api/ {
    proxy_pass http://backend:3000/;           # Forward requests to your backend container

    # Pass important headers to maintain original request context
    proxy_set_header Host $host;               # Preserve the original host header
    proxy_set_header X-Real-IP $remote_addr;   # Forward the real client IP address

    # Support WebSocket connections and keep-alive
    proxy_http_version 1.1;                    # Required for WebSocket
    proxy_set_header Upgrade $http_upgrade;    # Handle WebSocket upgrades
    proxy_set_header Connection 'upgrade';     # Required for WebSocket upgrades to work
    proxy_cache_bypass $http_upgrade;          # Disable caching during upgrade (prevents WebSocket issues)
  }
}
